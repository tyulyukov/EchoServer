let app = require('../app');
let http = require('http');
let mongoose = require("mongoose");
let serverDebug = require('debug')('echo:server')
let socketsDebug = require('debug')('echo:sockets')
let databaseDebug = require('debug')('echo:database')

require("dotenv").config();
const tokenKey = process.env.TOKEN_KEY

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

let server = http.createServer(app);
let { Server } = require("socket.io");
const crypto = require("crypto");
let io = new Server(server, {
  cors: {
    origin: "*",
  }
});

mongoose.connect(process.env.DB_CONNECTION_STRING, { useNewUrlParser: true, useUnifiedTopology: true }, function (err) {
  if (err) {
    databaseDebug(err)
    process.exit(1)
  }

})

const Message = require('../database/models/message');
const Chat = require("../database/models/chat");
const User = require("../database/models/user");

/*Message.updateMany({ }, { edits: [] }, { returnOriginal: false }, async function (err, doc)
{
  let messages = await Message.find({} );

  for (const message of messages) {
    Message.findByIdAndUpdate(message._id, { editedAt: message.sentAt }, { returnOriginal: false }, function (err, doc) {});
  }
});*/

io.use((socket, next) => {
  const authorization = socket.handshake.query.authorization.replace(' ', '+');

  if (!authorization)
    return next(new Error("401"));

  let tokenParts = authorization.split('.')
  let signature = crypto
      .createHmac('SHA256', tokenKey)
      .update(`${tokenParts[0]}.${tokenParts[1]}`)
      .digest('base64')

  if (signature === tokenParts[2])
    socket.userId = JSON.parse(Buffer.from(tokenParts[1], 'base64').toString('utf8'))
  else
    return next(new Error("401"));

  next();
});

let onlineUsers = [];
exports.getOnlineUsers = function () {
  return onlineUsers;
}
io.on('connection', function(socket) {
  // TODO if userId == null - disconnect socket

  socketsDebug('CONNECT', socket.userId, 'SOCKET', socket.id)

  onlineUsers = [];
  for (let [id, userSocket] of io.of("/").sockets) {
    onlineUsers.push({
      socket: userSocket,
      userId: userSocket.userId,
    });
  }

  let onlineUsersId = [];
  for (const user of onlineUsers)
    if (user.userId !== socket.userId) {
      user.socket.emit('user connected', socket.userId)
      onlineUsersId.push(user.userId)
    }

  socket.emit('users online', onlineUsersId);

  socket.on('send message', async function (messageId, chatId, content, repliedOn) {
    let chat = await Chat.findById(chatId)
    if (chat.sender.toString() !== socket.userId && chat.receiver.toString() !== socket.userId) {
      socketsDebug('SEND MESSAGE FAILED', socket.userId)
      return socket.emit('send message failed', messageId)
    }

    let message = new Message()
    message._id = messageId
    message.chat = chat._id
    message.sender = socket.userId
    message.content = content.trim()
    if (repliedOn)
      message.repliedOn = repliedOn

    message.save(async function (err) {
      if (err) {
        databaseDebug(err)
        return socket.emit('send message failed', messageId)
      }

      if (repliedOn)
        message = await Message.populate(message, {
          path : 'repliedOn',
          select : '_id content sender sentAt editedAt haveSeen',
          populate : {
            path : 'sender',
          }
        })

      message = await Message.populate(message, { path: "sender" })
      message = await Message.populate(message, {
        path: "chat",
        populate: { path: "sender receiver" }
      })

      let targetUserId

      if (message.chat.sender._id.toString() !== socket.userId.toString())
        targetUserId = message.chat.sender._id
      else
        targetUserId = message.chat.receiver._id

      for (const onlineUser of onlineUsers)
        if (onlineUser.userId == socket.userId) {
          socketsDebug('MESSAGE SEND SUCCESS', onlineUser.userId)
          onlineUser.socket.emit('message sent', message)
        } else if (onlineUser.userId == targetUserId.toString()) {
          socketsDebug('MESSAGE SENT TO', onlineUser.userId)
          onlineUser.socket.emit('message sent', message)
        }
    })
  })

  socket.on('user typing', function (targetUserId) {
    // TODO replace targetUserId with chatId for future updates
    for (const onlineUser of onlineUsers)
      if (onlineUser.userId == targetUserId) {
        onlineUser.socket.emit('user typing', socket.userId)
      }
  })

  socket.on('read message', function (messageId) {
    // TODO find message -> check if its not a sender -> check if its a user that present in chat

    Message.findOneAndUpdate({ _id: messageId }, { haveSeen: true }, { returnOriginal: false }, function (err, doc) {
      if (err)
        return databaseDebug(err)

      for (const onlineUser of onlineUsers)
        if (onlineUser.userId == doc.sender.toString() || (onlineUser.userId == socket.userId && onlineUser.socket.id != socket.id)) {
          onlineUser.socket.emit('message read', socket.userId, messageId)
        }
    })
  })

  socket.on('edit message', async function (messageId, content) {
    let message = await Message.findById(messageId);

    if (message.sender.toString() !== socket.userId.toString())
      return socketsDebug('EDIT MESSAGE FAILED', socket.userId)

    Message.findOneAndUpdate({ _id: messageId }, { content: content.trim() }, { returnOriginal: true }, function (err, doc) {
      if (err)
        return databaseDebug(err)

      let edit = { content: doc.content, date: doc.editedAt }
      Message.findOneAndUpdate({ _id: messageId }, { $push: { edits: edit } }, async function (err, msg) {
        if (err)
          return databaseDebug(err)

        Message.findOneAndUpdate({ _id: messageId }, { editedAt: Date.now() }, { returnOriginal: false }, async function (err, message) {
          if (err)
            return databaseDebug(err)

          message = await Message.populate(message, { path: "sender" })
          message = await Message.populate(message, {
            path: "chat",
            populate: {path: "sender receiver"}
          })

          for (const onlineUser of onlineUsers) {
            if (onlineUser.userId != message.sender._id.toString()) {
              socketsDebug('MESSAGE EDITED BY', socket.userId)
              onlineUser.socket.emit('message edited', message)
            } else if (onlineUser.userId == socket.userId && onlineUser.socket.id != socket.id) {
              socketsDebug('MESSAGE EDITED BY ME ANOTHER SESSION', socket.userId)
              onlineUser.socket.emit('message edited', message)
            }
          }
        });
      });
    })
  })

  socket.on('delete message', async function (messageId) {
    let message = await Message.findById(messageId);

    if (message.sender.toString() !== socket.userId.toString())
      return socketsDebug('DELETE MESSAGE FAILED', socket.userId)

    Message.updateMany({ repliedOn: messageId }, { repliedOn: null }, function (err) {
      if (err)
        return databaseDebug(err)

      Message.findOneAndDelete({ _id: messageId }, { returnOriginal: false }, async function (err, doc) {
        if (err)
          return databaseDebug(err)

        if (doc) {
          doc = await Message.populate(doc, { path: "chat" })

          let targetUserId

          if (doc.chat.sender.toString() !== socket.userId.toString())
            targetUserId = doc.chat.sender
          else
            targetUserId = doc.chat.receiver

          for (const onlineUser of onlineUsers)
            if (onlineUser.userId != doc.sender.toString()) {
              socketsDebug('MESSAGE DELETED BY', socket.userId)
              onlineUser.socket.emit('message deleted', socket.userId, messageId)
            }
            else if (onlineUser.userId == socket.userId && onlineUser.socket.id != socket.id) {
              socketsDebug('MESSAGE DELETED BY ME ANOTHER SESSION', socket.userId)
              onlineUser.socket.emit('message deleted', targetUserId, messageId)
            }
        }
      })
    })
  })

  socket.on('disconnect', function () {
    socketsDebug('DISCONNECT', socket.userId, 'SOCKET', socket.id)

    for(let i = 0; i < onlineUsers.length; i++)
      if (onlineUsers[i].socket.id === socket.id)
        onlineUsers.splice(i, 1);

    for(let i = 0; i < onlineUsers.length; i++)
      if (onlineUsers[i].userId === socket.userId)
        return;

    for (const user of onlineUsers)
      if (user.socket.id !== socket.id) {
        user.socket.emit('user disconnected', socket.userId)
      }

    User.findOneAndUpdate({_id: socket.userId}, {lastOnlineAt: Date.now()}, null, function (err) {
      if (err)
        databaseDebug(err)
    })
  })
});

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      serverDebug(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      serverDebug(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;

  serverDebug('Listening on ' + bind);

  if (addr.port)
    serverDebug('Server started at: http://localhost:' + addr.port + '/')
}