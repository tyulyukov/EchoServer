let app = require('../app');
let debug = require('debug')('echoserver:server');
let http = require('http');
require("dotenv").config();
const tokenKey = process.env.TOKEN_KEY

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

let server = http.createServer(app);
let { Server } = require("socket.io");
const crypto = require("crypto");
let io = new Server(server, {
  cors: {
    origin: "*",
  }
});

io.use((socket, next) => {
  const authorization = socket.handshake.query.authorization;

  if (!authorization)
    return next(new Error("Invalid jwt"));

  let tokenParts = authorization.split('.')
  let signature = crypto
      .createHmac('SHA256', tokenKey)
      .update(`${tokenParts[0]}.${tokenParts[1]}`)
      .digest('base64')

  if (signature === tokenParts[2])
    socket.userId = JSON.parse(Buffer.from(tokenParts[1], 'base64').toString('utf8'))

  next();
});

io.on('connection', function(socket) {
  const users = [];
  for (let [id, socket] of io.of("/").sockets) {
    users.push({
      socketId: id,
      userId: socket.userId,
    });
  }

  console.log('CONNECT ' + socket.userId);
  // console.log('users: ', users);

  socket.on('disconnect', function () {
    console.log('DISCONNECT ' + socket.userId);
  });
});

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;

  debug('Listening on ' + bind);

  if (addr.port)
    debug('Server started at: http://localhost:' + addr.port + '/')
}
